<?xml version="1.0" encoding="UTF-8" standalone="yes"?><tt xmlns="http://www.w3.org/ns/ttml" xmlns:tts="http://www.w3.org/ns/ttml#styling" xml:lang="">  <head>
<styling>
<style tts:fontSize="14" tts:textAlign="center" tts:wrapOption="wrap" id="1"/>
</styling>
</head>
<body>
<div xml:lang="ja">      
<p begin="00:00:00.00" end="00:00:00.56" style="1"><br/></p> 
<p begin="00:00:00.56" end="00:00:03.62" style="1">この動画では、XML の基本について学習します。</p> 
<p begin="00:00:03.62" end="00:00:06.00" style="1">XML はいくつかの用途で使用されます。</p> 
<p begin="00:00:06.00" end="00:00:08.70" style="1">BEML (Brightcove Experience Markup Language) では、プレーヤ テンプレートを作成するのに使用されます。<br/></p> 
<p begin="00:00:10.18" end="00:00:13.13" style="1">また、バッチ プロビジョニングで使用されるマニフェスト ファイルで使用されます。</p> 
<p begin="00:00:13.13" end="00:00:15.24" style="1">さらに、プレーヤ API を通じてキャプションや字幕を表示するためのファイルを取得する際にも使用されます。</p> 
<p begin="00:00:17.74" end="00:00:20.22" style="1">このような様々な目的に役立つのは、XML フレームワークの柔軟性のためです。</p> 
<p begin="00:00:22.33" end="00:00:24.97" style="1">一度 XML の構文規則の基本を理解すれば、様々な XML 言語を簡単に利用できるようになります。<br/></p> 
<p begin="00:00:29.69" end="00:00:31.50" style="1">それでは始めましょう。<br/></p> 
<p begin="00:00:31.50" end="00:00:34.49" style="1">最初に XML 言語は 3 種類の構成要素からできています。<br/></p> 
<p begin="00:00:35.42" end="00:00:39.02" style="1">タグ、タグの属性、およびデータです。タグは、要素とも呼ばれ、ノードと呼ばれる場合もあります。<br/></p> 
<p begin="00:00:41.53" end="00:00:44.93" style="1">XML 文書にはデータが含まれない場合がありますが、タグと属性は必ず含まれます。<br/></p> 
<p begin="00:00:47.31" end="00:00:50.74" style="1">タグは、XML 言語の基本構成要素であり、山かっこで囲みます。</p> 
<p begin="00:00:53.71" end="00:00:55.57" style="1">すべてのタグは終了する必要があります。<br/></p> 
<p begin="00:00:55.57" end="00:00:58.74" style="1">終了タグは、タグ名の前にスラッシュが付く以外は、開始タグと同じです。</p> 
<p begin="00:01:02.57" end="00:01:05.91" style="1">タグに別のタグやデータが含まれない場合は、開始タグの終わり山かっこの前にスラッシュを付けた自己終了タグを使用できることに注意してください。<br/></p> 
<p begin="00:01:13.78" end="00:01:17.27" style="1">タグのプロパティを定義する属性は、開始タグに含まれ、「属性名 = 値」という形式を取ります。ここで、値は必ず引用符で囲みます。<br/></p> 
<p begin="00:01:25.98" end="00:01:29.92" style="1">タグおよび属性名はすべて大文字と小文字を区別します。したがって、大文字 L のタグ名 Label は、小文字 l の label とは異なります。実際、両方のタグが、まったく別の目的のために同じ言語で存在する場合があります。<br/></p> 
<p begin="00:01:35.89" end="00:01:38.80" style="1"><br/></p> 
<p begin="00:01:41.03" end="00:01:44.02" style="1">場合によっては、属性の可能な値が指定されますが、その場合も値は大文字と小文字を区別します。<br/></p> 
<p begin="00:01:48.72" end="00:01:52.05" style="1">次に、タグは適切に入れ子にする必要があることに注意してください。</p> 
<p begin="00:01:52.05" end="00:01:57.12" style="1">たとえば、この BEML の例のように、layout タグの内部で hbox タグを開始した場合、hbox を閉じてから layout を閉じる必要があります。<br/></p> タグの内部ではデータも入れ子にする必要があることにも注意してください。また、XML 言語にはルート タグがあり、他のすべてのタグは、ルート タグの内部で入れ子にする必要があります。
<p begin="00:02:16.42" end="00:02:20.07" style="1">さらに、タグに似た特別な構成要素がいくつかあります。これらは、この特定の XML 言語の一部ではありませんが、XML 文書で使用できます。<br/></p> 
<p begin="00:02:25.99" end="00:02:29.71" style="1">その 1 つが CDATA ラッパーです。ドキュメントのデータをこれで包み、XML プロセッサがデータを XML コードと解釈しないようにします。</p> 
<p begin="00:02:36.31" end="00:02:38.62" style="1">XML コードと間違えそうなデータがない場合には、このラッパーを使用する必要はありませんが、念のために使用することはいつでも可能です。</p> 
<p begin="00:02:45.42" end="00:02:49.09" style="1">次に XML 宣言です。これは、文書の最初にあり、ブラウザやエディタなどのプロセッサに、XML 仕様のどのバージョンに文書が準拠しているかを示します。</p> 
<p begin="00:02:58.28" end="00:03:01.04" style="1">次は DOCTYPE 宣言です。これは、使用している特定の XML 言語の規則を定義する文書型定義（DTD）を指定します。</p> 
<p begin="00:03:08.98" end="00:03:12.19" style="1">これが特に便利なのは、今のように XML エディタを使用している場合です。エディタは、言語の規則を読み込むことができます。このようなエディタが普通提供する構文の強調表示の他に、コードの補完やエラー チェックなどの機能が利用できます。</p> 
<p begin="00:03:25.91" end="00:03:28.52" style="1">これらのツールは、XML を使った作業の時間を節約したりイライラを減らしてくれます。したがって、作業を簡単にするために XML エディタを手に入れることを検討するようお勧めします。<br/></p> 
<p begin="00:03:33.65" end="00:03:37.18" style="1">私がここで使っているのは Xmplify です。xmplifyapp.com で手に入る低価格のエディタです。ただし、Web で XML エディタを検索すれば、他にもいくつか見つかります。</p> 
<p begin="00:03:44.77" end="00:03:46.07" style="1"><br/></p>    
</div>  
</body>
</tt>